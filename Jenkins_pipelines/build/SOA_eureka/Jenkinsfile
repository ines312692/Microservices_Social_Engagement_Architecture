pipeline {
  agent {
    kubernetes {
      inheritFrom 'build-eureka'
      defaultContainer 'docker'
      namespace 'soa-microservices'
      serviceAccount 'eureka-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'k-eureka'
    IMAGE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT.take(7)}"
    DOCKER_BUILDKIT = '1'
    GRADLE_CACHE_PATH = '/mnt/gradle_cache'
    ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    WORK_DIR = "${WORKSPACE}/EurekaSOA"
  }

  options {
    skipDefaultCheckout(true)
    timestamps()
    timeout(time: 15, unit: 'MINUTES')
  }

  stages {
    stage('Checkout Last Commit Only') {
      steps {
        script {
          try {
            checkout([
              $class: 'GitSCM',
              branches: [[name: '*/feature/otimising_jenkins_build_performance']],
              userRemoteConfigs: [[url: 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git']],
              extensions: [
                [$class: 'CloneOption', depth: 1, noTags: false, shallow: true]
              ]
            ])
          } catch (Exception e) {
            echo "Erreur dans le stage 'Checkout Last Commit Only' : ${e.message}"
            error("Échec du checkout Git")
          }
        }
      }
    }

    stage('Build and Test') {
      steps {
        script {
          try {
            container('docker') {
              dir("${WORK_DIR}") {
                sh './gradlew build --no-daemon --build-cache --parallel --project-cache-dir=${GRADLE_CACHE_PATH}'
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Build and Test' : ${e.message}"
            error("Échec de la compilation et des tests")
          }
        }
      }
    }

    stage('Docker Login') {
      steps {
        script {
          try {
            container('docker') {
              withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin'
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Docker Login' : ${e.message}"
            error("Échec login Docker")
          }
        }
      }
    }

    stage('Build Image') {
      steps {
        script {
          try {
            container('docker') {
              dir("${WORK_DIR}") {
                sh '''
                  docker build \
                    --build-arg BUILDKIT_INLINE_CACHE=1 \
                    -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                    -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest .
                '''
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Build Image' : ${e.message}"
            error("Échec de la construction de l'image Docker")
          }
        }
      }
    }

    stage('Push Image') {
      steps {
        script {
          try {
            container('docker') {
              sh '''
                docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
                docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest
              '''
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Push Image' : ${e.message}"
            error("Échec du push de l'image Docker")
          }
        }
      }
    }

    stage('Save Artifacts') {
      steps {
        script {
          try {
            container('docker') {
              sh '''
                mkdir -p ${ARTIFACTS_PVC_PATH}/soa-${BUILD_NUMBER}
                cp -r ${WORK_DIR}/* ${ARTIFACTS_PVC_PATH}/soa-${BUILD_NUMBER}/ || true
              '''
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Save Artifacts' : ${e.message}"
            error("Échec de la sauvegarde des artefacts")
          }
        }
      }
    }

    stage('Nettoyage') {
      steps {
        script {
          try {
            container('docker') {
              sh 'docker system prune -f || true'
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Nettoyage' : ${e.message}"
            error("Échec lors du nettoyage")
          }
        }
      }
    }
  }

  post {
    success {
      echo "Build terminé avec succès pour Eureka Server (SOA)"
    }
    failure {
      echo "Build échoué pour Eureka Server (SOA)"
    }
    cleanup {
      sh 'docker logout || true'
    }
  }
}
