pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-user'
            defaultContainer 'kubectl'
            namespace 'soa-microservices'
            serviceAccount 'usersoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'fix/code-quality-checks',
            description: 'Branche à builder'
        )
    }

    environment {
        DOCKERHUB_USERNAME = 'inestmimi123'
        DOCKERHUB_IMAGE    = 'k-usersoa'
        IMAGE_TAG          = "latest"
        DOCKER_BUILDKIT    = '1'
        GRADLE_CACHE_PATH  = '/mnt/gradle_cache'
        GRADLE_USER_HOME   = "${GRADLE_CACHE_PATH}"
        REPO_URL           = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        WORK_DIR           = "${WORKSPACE}/UserSOA/UserSOA"
        SONARQUBE_SERVER   = 'sonarqube-local'
        ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    }

    options {
        skipDefaultCheckout(true)
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    triggers {
        githubPush()
    }

    stages {

        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
                        retry(2) {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "*/${params.TARGET_BRANCH}"]],
                                userRemoteConfigs: [[url: "${REPO_URL}"]],
                                extensions: [
                                    [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                                    [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"],
                                    [$class: 'CleanBeforeCheckout']
                                ]
                            ])
                        }
                    } catch (Exception e) {
                        echo "Erreur Checkout : ${e.toString()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Préparer Cache') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh "chmod +x ./gradlew"
                                sh "[ -d ${GRADLE_CACHE_PATH} ] || mkdir -p ${GRADLE_CACHE_PATH}"
                            } catch (Exception e) {
                                echo "Erreur préparation cache : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Prewarm Gradle Daemon') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh "./gradlew --daemon help || true"
                            } catch (Exception e) {
                                echo "Erreur Prewarm Gradle : ${e.toString()}"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Gradle') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh """
                                    ./gradlew assemble \
                                        --parallel \
                                        --max-workers=4 \
                                        --project-cache-dir=${GRADLE_CACHE_PATH} \
                                        --daemon \
                                        --configure-on-demand \
                                        --build-cache \
                                        --no-scan
                                """
                            } catch (Exception e) {
                                echo "Erreur Build Gradle : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh """
                                    ./gradlew test \
                                        --parallel \
                                        --max-workers=4 \
                                        --project-cache-dir=${GRADLE_CACHE_PATH}
                                """
                            } catch (Exception e) {
                                echo "Erreur Unit Tests : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                                    sh """
                                        ./gradlew sonar \
                                            -Dsonar.projectKey=usersoa \
                                            -Dsonar.java.binaries=build/classes/java/main \
                                            -Dsonar.junit.reportPaths=build/test-results/test \
                                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
                                    """
                                }
                            } catch (Exception e) {
                                echo "Erreur SonarQube : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Insufficient code quality! Stopping the pipeline."
                            }
                        }
                    } catch (Exception e) {
                        echo "Erreur Quality Gate : ${e.toString()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                container('docker') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                                  usernameVariable: 'DOCKER_USER',
                                                                  passwordVariable: 'DOCKER_PASS')]) {
                                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                        env.IMAGE_NAME = "${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}"
                                        env.APP_IMAGE = docker.build(env.IMAGE_NAME)
                                        echo "Docker image built: ${env.IMAGE_NAME}"
                                    }
                                }
                            } catch (Exception e) {
                                echo "Erreur Docker Build : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                container('trivy') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                echo "Running security scan with Trivy"
                                sh """
                                    trivy image \
                                        --scanners vuln \
                                        --vuln-type os \
                                        --severity CRITICAL,HIGH \
                                        --exit-code 1 \
                                        --no-progress \
                                        ${env.IMAGE_NAME}
                                """
                            } catch (Exception e) {
                                echo "Erreur Trivy Scan : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                container('docker') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                                  usernameVariable: 'DOCKER_USER',
                                                                  passwordVariable: 'DOCKER_PASS')]) {
                                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                        echo "Pushing Docker image: ${env.IMAGE_NAME}"
                                        env.APP_IMAGE.push()
                                    }
                                }
                            } catch (Exception e) {
                                echo "Erreur Docker Push : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Restart Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        try {
                            echo "Restarting usersoa-deployment..."
                            sh """
                                kubectl rollout restart deployment/usersoa-deployment -n soa-microservices
                                kubectl rollout status deployment/usersoa-deployment -n soa-microservices --timeout=120s
                            """
                        } catch (Exception e) {
                            echo "Erreur Restart Deploy : ${e.toString()}"
                            currentBuild.result = 'FAILURE'
                            throw e
                        }
                    }
                }
            }
        }

    }

    post {
        success {
            echo "Build terminé avec succès pour UserSOA"
        }
        failure {
            echo "Build échoué pour UserSOA"
        }
    }
}
