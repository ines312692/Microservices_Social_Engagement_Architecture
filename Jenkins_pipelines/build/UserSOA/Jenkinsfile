pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-user'
            defaultContainer 'kubectl'
            namespace 'soa-microservices'
            serviceAccount 'usersoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'feature/otimising_jenkins_build_performance',
            description: 'Branche à builder'
        )
    }

    environment {
        IMAGE_TAG         = 'latest'
        DOCKERHUB_USERNAME = 'inestmimi123'
        DOCKERHUB_IMAGE   = 'k-usersoa'
        DOCKER_BUILDKIT   = '1'
        GRADLE_CACHE_PATH = '/mnt/gradle_cache'
        GRADLE_USER_HOME  = "${GRADLE_CACHE_PATH}"
        REPO_URL          = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        WORK_DIR          = "${WORKSPACE}/UserSOA/UserSOA"
        SONARQUBE_SERVER  = 'sonarqube-local'
    }

    options {
        skipDefaultCheckout(true)
        timeout(time: 30, unit: 'MINUTES')
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
                        retry(2) {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "*/${params.TARGET_BRANCH}"]],
                                userRemoteConfigs: [[url: "${REPO_URL}"]],
                                extensions: [
                                    [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                                    [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"],
                                    [$class: 'CleanBeforeCheckout']
                                ]
                            ])
                        }
                    } catch (Exception e) {
                        echo "Erreur Checkout : ${e.toString()}"
                        error("Échec du checkout Git")
                    }
                }
            }
        }

        stage('Préparer Cache') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh "chmod +x ./gradlew"
                                sh "[ -d ${GRADLE_CACHE_PATH} ] || mkdir -p ${GRADLE_CACHE_PATH}"
                            } catch (Exception e) {
                                echo "Erreur préparation cache : ${e.toString()}"
                                error("Échec préparation cache Gradle")
                            }
                        }
                    }
                }
            }
        }

        stage('Prewarm Gradle Daemon') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                echo "Prewarming Gradle daemon..."
                                sh "./gradlew --daemon help || true"
                            } catch (Exception e) {
                                echo "Erreur Prewarm Gradle : ${e.toString()}"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Gradle') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh """
                                    ./gradlew assemble \
                                        --parallel \
                                        --max-workers=4 \
                                        --project-cache-dir=${GRADLE_CACHE_PATH} \
                                        --daemon \
                                        --configure-on-demand \
                                        --build-cache \
                                        --no-scan
                                """
                            } catch (Exception e) {
                                echo "Erreur Build Gradle : ${e.toString()}"
                                error("Échec compilation Gradle")
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh """
                                    ./gradlew test \
                                        --parallel \
                                        --max-workers=4 \
                                        --project-cache-dir=${GRADLE_CACHE_PATH}
                                """
                            } catch (Exception e) {
                                echo "Erreur Unit Tests : ${e.toString()}"
                                error("Échec tests unitaires")
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                container('docker') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                                  usernameVariable: 'DOCKER_USER',
                                                                  passwordVariable: 'DOCKER_PASS')]) {
                                    def imageName = "${DOCKER_USER}/usersoa:${IMAGE_TAG}"
                                    echo "Building Docker image with BuildKit and cache-from: ${imageName}"

                                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                        sh """
                                            DOCKER_BUILDKIT=1 docker build \
                                                --cache-from=${DOCKER_USER}/usersoa:latest \
                                                --tag ${imageName} \
                                                .
                                        """
                                    }

                                    env.IMAGE_NAME = imageName
                                    echo "Docker image built successfully: ${env.IMAGE_NAME}"
                                }
                            } catch (Exception e) {
                                echo "Erreur Docker Build : ${e.toString()}"
                                error("Échec construction image Docker")
                            }
                        }
                    }
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                container('trivy') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                if (!env.IMAGE_NAME) {
                                    error "IMAGE_NAME is not set. Docker build may have failed."
                                }
                                echo "Running security scan with Trivy on image: ${env.IMAGE_NAME}"
                                sh """
                                    trivy image \
                                        --scanners vuln \
                                        --vuln-type os \
                                        --severity CRITICAL,HIGH \
                                        --exit-code 1 \
                                        --no-progress \
                                        ${env.IMAGE_NAME}
                                """
                            } catch (Exception e) {
                                echo "Erreur Trivy Scan : ${e.toString()}"
                                error("Échec scan sécurité Trivy")
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                container('docker') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                if (!env.IMAGE_NAME) {
                                    error "IMAGE_NAME is not set. Cannot push image."
                                }

                                echo "Pushing Docker image: ${env.IMAGE_NAME}"

                                docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                    def appImage = docker.image(env.IMAGE_NAME)
                                    appImage.push()
                                }

                                echo "Docker image pushed successfully: ${env.IMAGE_NAME}"
                            } catch (Exception e) {
                                echo "Erreur Docker Push : ${e.toString()}"
                                error("Échec push image Docker")
                            }
                        }
                    }
                }
            }
        }

        stage('Restart Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        try {
                            echo "Restarting usersoa-deployment with image: ${env.IMAGE_NAME}"
                            sh """
                                kubectl rollout restart deployment/usersoa-deployment -n soa-microservices
                                kubectl rollout status deployment/usersoa-deployment -n soa-microservices --timeout=120s
                            """
                        } catch (Exception e) {
                            echo "Erreur Restart Deploy : ${e.toString()}"
                            error("Échec redéploiement Kubernetes")
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build completed successfully for UserSOA"
        }
        failure {
            echo "Build failed for UserSOA"
        }
    }
}
