pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-eng'
            defaultContainer 'docker'
            namespace 'soa-microservices'
            serviceAccount 'engsoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'ops/jenkins-eng-improvement',
            description: 'Branche à builder'
        )
    }

    environment {
        DOCKERHUB_IMAGE   = 'k-engsoa'
        IMAGE_TAG         = "latest"
        DOCKERHUB_USERNAME = 'inestmimi123'
        DOCKER_BUILDKIT   = '1'
        GRADLE_CACHE_PATH = '/mnt/gradle_cache'
        GRADLE_USER_HOME  = "${GRADLE_CACHE_PATH}"
        REPO_URL          = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        SONARQUBE_SERVER  = 'sonarqube-local'
        WORK_DIR          = "${WORKSPACE}/engagementSOA"
    }

    options {
        skipDefaultCheckout(true)
    }

    triggers {
        githubPush()
    }

    stages {

        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
                        retry(2) {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "*/${params.TARGET_BRANCH}"]],
                                userRemoteConfigs: [[url: "${REPO_URL}"]],
                                extensions: [
                                    [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                                    [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"],
                                    [$class: 'CleanBeforeCheckout']
                                ]
                            ])
                        }
                    } catch (Exception e) {
                        echo "Erreur Checkout : ${e.toString()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Préparer Cache') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            sh "chmod +x ./gradlew"
                            sh "[ -d ${GRADLE_CACHE_PATH} ] || mkdir -p ${GRADLE_CACHE_PATH}"
                        }
                    }
                }
            }
        }

        stage('Prewarm Gradle Daemon') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        sh "./gradlew --daemon help || true"
                    }
                }
            }
        }

        stage('Build Gradle') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        sh """
                            ./gradlew assemble \
                                --parallel \
                                --max-workers=4 \
                                --project-cache-dir=${GRADLE_CACHE_PATH} \
                                --daemon \
                                --configure-on-demand \
                                --build-cache \
                                --no-scan
                        """
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        sh """
                            ./gradlew test \
                                --parallel \
                                --max-workers=4 \
                                --project-cache-dir=${GRADLE_CACHE_PATH}
                        """
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh """
                            ./gradlew sonar \
                                -Dsonar.projectKey=engagementSOA \
                                -Dsonar.java.binaries=build/classes/java/main \
                                -Dsonar.junit.reportPaths=build/test-results/test \
                                -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
                        """
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                container('docker') {
                    dir("${WORK_DIR}") {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                def imageName = "${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}"
                                def appImage = docker.build(
                                    imageName,
                                    """--build-arg BUILDKIT_INLINE_CACHE=1 \
                                       --cache-from=${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                                       -f Dockerfile ."""
                                )

                                echo "Scanning Docker image with Trivy..."
                                sh """
                                    docker run --rm \
                                    -v /var/run/docker.sock:/var/run/docker.sock \
                                    aquasec/trivy image \
                                    --scanners vuln \
                                    --vuln-type os \
                                    --severity CRITICAL,HIGH \
                                    --exit-code 1 \
                                    --no-progress \
                                    ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
                                """

                                parallel(
                                    "Push Tagged": { appImage.push() },
                                    "Push Latest": { appImage.push('latest') }
                                )
                            }
                        }
                    }
                }
            }
        }

        stage('Restart Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        echo "Restarting engsoa-deployment..."
                        sh """
                            kubectl rollout restart deployment/engsoa-deployment -n soa-microservices
                            kubectl rollout status deployment/engsoa-deployment -n soa-microservices --timeout=120s
                        """
                    }
                }
            }
        }

    }

    post {
        success {
            echo "Build completed successfully for EngagementSOA"
        }
        failure {
            echo "Build failed for EngagementSOA"
        }
    }
}
