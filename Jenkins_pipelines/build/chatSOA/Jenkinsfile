pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-chat'
            defaultContainer 'multitool'
            namespace 'soa-microservices'
            serviceAccount 'chatsoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'chore/update-chat-jenkinsfile',
            description: 'Branche à builder'
        )
    }

    environment {
        IMAGE_NAME        = 'inestmimi123/chatsoa:latest'
        DOCKER_BUILDKIT   = '1'
        GRADLE_CACHE_PATH = '/mnt/gradle_cache'
        GRADLE_USER_HOME  = "${GRADLE_CACHE_PATH}"
        REPO_URL          = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        SONARQUBE_SERVER  = 'sonarqube-local'
        WORK_DIR          = "${WORKSPACE}/chatSOA/chatSOA"
    }

    options {
        skipDefaultCheckout(true)
        timeout(time: 30, unit: 'MINUTES')
    }

    triggers {
        githubPush()
    }

    stages {
       stage('Checkout') {
                   steps {
                       script {
                           try {
                               echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
                               retry(2) {
                                   checkout([
                                       $class: 'GitSCM',
                                       branches: [[name: "*/${params.TARGET_BRANCH}"]],
                                       userRemoteConfigs: [[url: "${REPO_URL}"]],
                                       extensions: [
                                           [$class: 'CloneOption', depth: 0, noTags: true, shallow: true],
                                           [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"],
                                           [$class: 'CleanBeforeCheckout']
                                       ]
                                   ])
                               }
                           } catch (Exception e) {
                               echo "Erreur Checkout : ${e.toString()}"
                               currentBuild.result = 'FAILURE'
                               throw e
                           }
                       }
                   }
               }

               stage('Préparer Cache') {
                   steps {
                       dir("${WORK_DIR}") {
                           script {
                               try {
                                   sh "chmod +x ./gradlew"
                                   sh "[ -d ${GRADLE_CACHE_PATH} ] || mkdir -p ${GRADLE_CACHE_PATH}"
                                   sh "gradle --version"  // Vérifier que Gradle fonctionne
                               } catch (Exception e) {
                                   echo "Erreur préparation cache : ${e.toString()}"
                                   currentBuild.result = 'FAILURE'
                                   throw e
                               }
                           }
                       }
                   }
               }

               stage('Prewarm Gradle Daemon') {
                   steps {
                       dir("${WORK_DIR}") {
                           script {
                               try {
                                   echo "Prewarming Gradle daemon..."
                                   sh "./gradlew --daemon help || true"
                               } catch (Exception e) {
                                   echo "Erreur Prewarm Gradle : ${e.toString()}"
                               }
                           }
                       }
                   }
               }

               stage('Build Gradle') {
                   steps {
                       dir("${WORK_DIR}") {
                           script {
                               try {
                                   sh """
                                       ./gradlew assemble \
                                           --parallel \
                                           --max-workers=4 \
                                           --project-cache-dir=${GRADLE_CACHE_PATH} \
                                           --daemon \
                                           --configure-on-demand \
                                           --build-cache \
                                           --no-scan
                                   """
                               } catch (Exception e) {
                                   echo "Erreur Build Gradle : ${e.toString()}"
                                   currentBuild.result = 'FAILURE'
                                   throw e
                               }
                           }
                       }
                   }
               }

               stage('Unit Tests') {
                   steps {
                       dir("${WORK_DIR}") {
                           script {
                               try {
                                   sh """
                                      ./gradlew test jacocoTestReport \
                                       --parallel \
                                       --max-workers=4 \
                                      --project-cache-dir=${GRADLE_CACHE_PATH} \
                                      --daemon \
                                      --build-cache
                                   """
                               } catch (Exception e) {
                                   echo "Erreur Unit Tests : ${e.toString()}"
                                   currentBuild.result = 'FAILURE'
                                   throw e
                               }
                           }
                       }
                   }
               }
               stage('Debug Test Reports') {
                   steps {
                       dir("${WORK_DIR}") {
                           script {
                               sh '''
                               echo "Current working directory:"
                               pwd
                               echo "Listing test-results directory:"
                               ls -la build/test-results/test/ || echo "test-results directory not found"
                               echo "Listing reports directory:"
                               ls -la build/reports/jacoco/test/ || echo "jacoco reports directory not found"
                               '''
                           }
                       }
                   }
               }
               stage('SonarQube Analysis') {
                   steps {
                           dir("${WORK_DIR}") {
                               script {
                                   try {
                                        withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                                                              sh '''
                                                                 ./gradlew sonar \
                                                                         -Dsonar.host.url=https://sonarcloud.io \
                                                                         -Dsonar.organization=ines312692 \
                                                                         -Dsonar.projectKey=ines312692_Microservices_Social_Engagement_Architecture \
                                                                         -Dsonar.token=$SONAR_TOKEN \
                                                                         -Dsonar.junit.reportPaths=build/test-results/test \
                                                                         -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                                                                         --parallel \
                                                                         --max-workers=4 \
                                                                         --project-cache-dir=${GRADLE_CACHE_PATH} \
                                                                         --daemon \
                                                                         --build-cache
                                                              '''
                                       }
                                   } catch (Exception e) {
                                       echo "Erreur SonarQube : ${e.toString()}"
                                       currentBuild.result = 'FAILURE'
                                       throw e
                                   }
                               }
                           }
                   }
               }


               stage('Docker Build') {
                   steps {
                       container('docker') {
                           dir("${WORK_DIR}") {
                               script {
                                   try {
                                       docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                           sh """
                                               DOCKER_BUILDKIT=1 docker build \
                                                   --cache-from=${env.IMAGE_NAME} \
                                                   --tag ${env.IMAGE_NAME} \
                                                   .
                                           """
                                       }
                                       echo "Docker image built successfully: ${env.IMAGE_NAME}"
                                   } catch (Exception e) {
                                       echo "Erreur Docker Build : ${e.toString()}"
                                       currentBuild.result = 'FAILURE'
                                       throw e
                                   }
                               }
                           }
                       }
                   }
               }


               stage('Trivy Scan') {
                   steps {
                       dir("${WORK_DIR}") {
                           script {
                               try {
                                   echo "Running security scan with Trivy on image: ${env.IMAGE_NAME}"
                                   sh """
                                       trivy image \
                                           --scanners vuln \
                                           --vuln-type os \
                                           --severity CRITICAL,HIGH \
                                           --exit-code 1 \
                                           --no-progress \
                                           ${env.IMAGE_NAME}
                                   """
                               } catch (Exception e) {
                                   echo "Erreur Trivy Scan : ${e.toString()}"
                                   currentBuild.result = 'FAILURE'
                                   throw e
                               }
                           }
                       }
                   }
               }

               stage('Docker Push') {
                   steps {
                       container('docker') {
                           dir("${WORK_DIR}") {
                               script {
                                   try {
                                       echo "Pushing Docker image: ${env.IMAGE_NAME}"
                                       docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                           docker.image(env.IMAGE_NAME).push()
                                       }
                                       echo "Docker image pushed successfully: ${env.IMAGE_NAME}"
                                   } catch (Exception e) {
                                       echo "Erreur Docker Push : ${e.toString()}"
                                       currentBuild.result = 'FAILURE'
                                       throw e
                                   }
                               }
                           }
                       }
                   }
               }

               stage('Restart Deploy to Kubernetes') {
                   steps {
                       script {
                           try {
                               sh """
                                   kubectl rollout restart deployment/chatsoa-deployment -n soa-microservices
                                   kubectl rollout status deployment/chatsoa-deployment -n soa-microservices --timeout=120s
                               """
                           } catch (Exception e) {
                               echo "Erreur Restart Deploy : ${e.toString()}"
                               currentBuild.result = 'FAILURE'
                               throw e
                           }
                       }
                   }
               }
           }

    post {
        success {
            echo "Build completed successfully for ChatSOA"
        }
        failure {
            echo "Build failed for ChatSOA"
        }
    }
}
