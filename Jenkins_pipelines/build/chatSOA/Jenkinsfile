pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-chat'
            defaultContainer 'kubectl'
            namespace 'soa-microservices'
            serviceAccount 'chatsoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'chore/update-chat-jenkinsfile',
            description: 'Branche √† builder'
        )
    }

    environment {
        IMAGE_NAME        = 'inestmimi123/chatsoa:latest'
        DOCKER_BUILDKIT   = '1'
        GRADLE_CACHE_PATH = '/mnt/gradle_cache'
        GRADLE_USER_HOME  = "${GRADLE_CACHE_PATH}"
        REPO_URL          = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        SONARQUBE_SERVER  = 'sonarqube-local'
        WORK_DIR          = "${WORKSPACE}/chatSOA/chatSOA"
    }

    options {
        skipDefaultCheckout(true)
        timeout(time: 30, unit: 'MINUTES')
    }

    triggers {
        githubPush()
    }

    stages {
       stage('Build Multi-Tool Container') {
           steps {
               container('docker') {
                   script {
                       try {
                           // Cr√©er le Dockerfile avec kubectl + gradle + trivy + docker
                           writeFile file: 'Dockerfile.multitool', text: '''FROM openjdk:17-jdk-slim

       # Variables d'environnement
       ENV GRADLE_VERSION=8.5
       ENV KUBECTL_VERSION=v1.28.4
       ENV TRIVY_VERSION=0.48.1

       # Installer les d√©pendances de base
       RUN apt-get update && \\
           apt-get install -y --no-install-recommends \\
               curl \\
               wget \\
               ca-certificates \\
               bash \\
               git \\
               vim \\
               gnupg \\
               unzip && \\
           apt-get clean && \\
           rm -rf /var/lib/apt/lists/*

       # Installer kubectl
       RUN curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" && \\
           chmod +x kubectl && \\
           mv kubectl /usr/local/bin/

       # Installer Gradle
       RUN wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip && \\
           unzip gradle-${GRADLE_VERSION}-bin.zip -d /opt && \\
           rm gradle-${GRADLE_VERSION}-bin.zip && \\
           ln -s /opt/gradle-${GRADLE_VERSION}/bin/gradle /usr/local/bin/gradle

       # Installer Trivy
       RUN wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | tee /usr/share/keyrings/trivy.gpg > /dev/null && \\
           echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb bullseye main" | tee -a /etc/apt/sources.list.d/trivy.list && \\
           apt-get update && \\
           apt-get install -y trivy && \\
           apt-get clean && \\
           rm -rf /var/lib/apt/lists/*

       # Configurer Gradle
       ENV GRADLE_HOME=/opt/gradle-${GRADLE_VERSION}
       ENV PATH=${GRADLE_HOME}/bin:${PATH}
       ENV GRADLE_USER_HOME=/home/gradle/.gradle

       # Cr√©er les r√©pertoires n√©cessaires
       RUN mkdir -p /home/gradle/.gradle && \\
           mkdir -p /home/jenkins/agent

       # D√©finir le shell par d√©faut
       SHELL ["/bin/bash", "-c"]
       WORKDIR /home/jenkins/agent

       # V√©rifier les installations
       RUN echo "=== V√©rification des outils install√©s ===" && \\
           java -version && \\
           gradle --version && \\
           kubectl version --client && \\
           trivy --version

       CMD ["sleep", "9999999"]'''

                           // Builder et pusher l'image multi-outils
                           docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                               def imageName = "inestmimi123/multitool:latest"
                               def multiToolImage = docker.build(imageName, "-f Dockerfile.multitool .")

                               echo "üöÄ Push de l'image multi-outils vers DockerHub..."
                               multiToolImage.push()
                               multiToolImage.push("build-${BUILD_NUMBER}")
                               multiToolImage.push("v1.0")

                               echo "‚úÖ Image multi-outils cr√©√©e avec succ√®s: ${imageName}"
                               echo "üìã Contient: OpenJDK 17 + Gradle 8.5 + kubectl v1.28.4 + Trivy 0.48.1"
                           }

                           // Nettoyer le Dockerfile temporaire
                           sh "rm -f Dockerfile.multitool"

                       } catch (Exception e) {
                           echo "‚ùå Erreur Build & Push Multi-Tool Container : ${e.toString()}"
                           currentBuild.result = 'FAILURE'
                           throw e
                       }
                   }
               }
           }
       }
    }

    post {
        success {
            echo "Build completed successfully for ChatSOA"
        }
        failure {
            echo "Build failed for ChatSOA"
        }
    }
}
