pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-chat'
            defaultContainer 'gradle'
            namespace 'soa-microservices'
            serviceAccount 'chatsoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'ops/jenkins-chat-improvement',
            description: 'Branche √† builder'
        )
    }

    environment {
        DOCKERHUB_IMAGE   = 'k-chatsoa'
        IMAGE_TAG         = "${BUILD_NUMBER}-latest"
        DOCKER_BUILDKIT   = '1'
        GRADLE_CACHE_PATH = '/mnt/gradle_cache'
        GRADLE_USER_HOME  = "${GRADLE_CACHE_PATH}"
        REPO_URL          = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        SONARQUBE_SERVER  = 'sonarqube-local'
        WORK_DIR          = "${WORKSPACE}/chatSOA/chatSOA"
    }

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
                        retry(2) {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "*/${params.TARGET_BRANCH}"]],
                                userRemoteConfigs: [[url: "${REPO_URL}"]],
                                extensions: [
                                    [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                                    [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"],
                                    [$class: 'CleanBeforeCheckout']
                                ]
                            ])
                        }
                    } catch (Exception e) {
                        echo "Erreur Checkout : ${e.toString()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
       stage('Build & Push Kubectl Image') {
           steps {
               container('docker') {
                   script {
                       try {
                           // Method 1: Create Dockerfile using writeFile (Recommended)
                           writeFile file: 'Dockerfile', text: '''FROM debian:bullseye-slim

# Installer kubectl + utilitaires (bash, curl, git, etc.)
RUN apt-get update && \\
    apt-get install -y --no-install-recommends \\
        curl \\
        ca-certificates \\
        bash \\
        git \\
        vim \\
        gnupg && \\
    curl -fsSLo /usr/local/bin/kubectl \\
        https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl && \\
    chmod +x /usr/local/bin/kubectl && \\
    apt-get clean && rm -rf /var/lib/apt/lists/*

# D√©finir le shell par d√©faut
SHELL ["/bin/bash", "-c"]

WORKDIR /home/jenkins/agent

CMD ["sleep", "9999999"]'''

                           docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                               def imageName = "inestmimi123/kubectl:latest"
                               def kubectlImage = docker.build(imageName, "-f Dockerfile .")

                               echo "üöÄ Push de l'image kubectl vers DockerHub..."
                               kubectlImage.push()
                               kubectlImage.push("build-${BUILD_NUMBER}")
                           }
                       } catch (Exception e) {
                           echo "‚ùå Erreur Build & Push Kubectl : ${e.toString()}"
                           currentBuild.result = 'FAILURE'
                           throw e
                       }
                   }
               }
           }
       }

    }

    post {
        success {
            echo "Build termin√© avec succ√®s pour ChatSOA"
        }
        failure {
            echo "Build √©chou√© pour ChatSOA"
        }
    }
}