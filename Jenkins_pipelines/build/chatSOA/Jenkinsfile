pipeline {
  agent {
    kubernetes {
      inheritFrom 'build-chat'
      defaultContainer 'gradle'
      namespace 'soa-microservices'
      serviceAccount 'chatsoa-deployer'
    }
  }

  parameters {
    string(name: 'TARGET_BRANCH', defaultValue: 'chore/update-chat-jenkinsfile', description: 'Branche à builder')
  }

  environment {
    DOCKERHUB_IMAGE = 'k-chatsoa'
    IMAGE_TAG = "${BUILD_NUMBER}-latest"
    DOCKER_BUILDKIT = '1'
    GRADLE_CACHE_PATH = '/mnt/gradle_cache'
    GRADLE_USER_HOME = "${GRADLE_CACHE_PATH}"
    REPO_URL = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
    SONARQUBE_SERVER = 'sonarqube-local'
    WORK_DIR = "${WORKSPACE}/chatSOA/chatSOA"
  }

  options {
    skipDefaultCheckout(true)
  }

  stages {

    stage('Checkout') {
      steps {
        script {
          try {
            echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
            retry(2) {
              checkout([
                $class: 'GitSCM',
                branches: [[name: "*/${params.TARGET_BRANCH}"]],
                userRemoteConfigs: [[url: "${REPO_URL}"]],
                extensions: [
                  [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                  [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"]
                ]
              ])
            }
          } catch (Exception e) {
            echo "Erreur Checkout : ${e.toString()}"
            currentBuild.result = 'FAILURE'
            throw e
          }
        }
      }
    }

    stage('Préparer Cache') {
         steps {
           container('gradle') {
             dir("${WORK_DIR}") {
               script {
                 try {
                   sh "chmod +x ./gradlew"
                 } catch (Exception e) {
                   echo "Erreur préparation cache : ${e.toString()}"
                   currentBuild.result = 'FAILURE'
                   throw e
                 }
               }
             }
           }
         }
       }

       stage('Build Gradle') {
         steps {
           container('gradle') {
             dir("${WORK_DIR}") {
               script {
                 try {
                   writeFile file: "${WORK_DIR}/gradle.properties", text: """
                     org.gradle.daemon=true
                     org.gradle.jvmargs=-Xmx2g -Xms512m -XX:+UseParallelGC
                     org.gradle.caching=true
                   """
                   sh """
                     ./gradlew clean build --parallel --max-workers=6 \
                     --project-cache-dir=${GRADLE_CACHE_PATH} \
                     --build-cache --scan
                   """
                 } catch (Exception e) {
                   echo "Erreur Build Gradle : ${e.toString()}"
                   currentBuild.result = 'FAILURE'
                   throw e
                 }
               }
             }
           }
         }
       }

     }

     post {
       success { echo "Build terminé avec succès pour ChatSOA" }
       failure { echo "Build échoué pour ChatSOA" }
     }
   }