pipeline {
  agent {
    kubernetes {
      inheritFrom 'build-chat'
      defaultContainer 'gradle'
      namespace 'soa-microservices'
      serviceAccount 'chatsoa-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'k-chatsoa'
    IMAGE_TAG = "${BUILD_NUMBER}-latest"
    DOCKER_BUILDKIT = '1'
    GRADLE_CACHE_PATH = '/mnt/gradle_cache'
    ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    WORK_DIR = "${WORKSPACE}/chatSOA/chatSOA"
    BRANCH_NAME = 'feature/restructure-pipeline'
    REPO_URL = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
    SONARQUBE_SERVER = 'sonarqube-local'
  }

  options {
    skipDefaultCheckout(true)
  }

  stages {

    stage('Checkout') {
      steps {
        container('git') {
          script {
            try {
              echo "Début du Checkout depuis la branche ${BRANCH_NAME}"
              retry(2) {
                checkout([
                  $class: 'GitSCM',
                  branches: [[name: "*/${BRANCH_NAME}"]],
                  userRemoteConfigs: [[url: "${REPO_URL}"]],
                  extensions: [
                    [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                    [$class: 'LocalBranch', localBranch: "${BRANCH_NAME}"]
                  ]
                ])
              }
              echo "Checkout effectué avec succès depuis ${BRANCH_NAME}"
              if (env.DEBUG == 'true') { sh 'ls -la' }
            } catch (Exception e) {
              echo "Erreur dans le stage 'Checkout' : ${e.getMessage()}"
              error("Échec du checkout Git")
            }
          }
        }
      }
    }

    stage('Préparer Cache et Artifacts') {
      steps {
        script {
          try {
            container('docker') {
              sh """
                mkdir -p ${GRADLE_CACHE_PATH}
                mkdir -p ${ARTIFACTS_PVC_PATH}
              """
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Préparer Cache et Artifacts' : ${e.message}"
            error("Échec préparation cache/artifacts")
          }
        }
      }
    }

    stage('Unit Tests') {
      when { changeset "**/*.java" }
      steps {
        script {
          try {

              sh 'chmod +x ./gradlew'
              sh './gradlew test jacocoTestReport --parallel --max-workers=4 --project-cache-dir=${GRADLE_CACHE_PATH}'

          } catch (Exception e) {
            echo "Erreur dans le stage 'Unit Tests' : ${e.message}"
            error("Échec des tests unitaires")
          }
        }
      }
    }

    stage('SonarQube Analysis') {
     when { changeset "**/*.java" }
      steps {
        script {
          try {

              withSonarQubeEnv("${SONARQUBE_SERVER}") {
                sh 'chmod +x ./gradlew'
                sh './gradlew sonar \
                      -Dsonar.projectKey=chatSOA \
                      -Dsonar.java.binaries=build/classes/java/main \
                      -Dsonar.junit.reportPaths=build/test-results/test \
                      -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml'
              }

          } catch (Exception e) {
            echo "Erreur dans le stage 'SonarQube Analysis' : ${e.message}"
            error("Échec de l'analyse SonarQube")
          }
        }
      }
    }

    stage('Build Gradle') {
      steps {
        script {
          try {

              sh """
                chmod +x ./gradlew
                export GRADLE_USER_HOME=${GRADLE_CACHE_PATH}
                ./gradlew build --parallel --max-workers=4 --project-cache-dir=${GRADLE_CACHE_PATH}
              """

          } catch (Exception e) {
            echo "Erreur dans le stage 'Build Gradle' : ${e.message}"
            error("Échec de la compilation Gradle")
          }
        }
      }
    }

    stage('Docker Login') {
      steps {
        script {
          try {
            container('docker') {
              withCredentials([usernamePassword(
                credentialsId: 'dockerhub-creds',
                usernameVariable: 'USERNAME',
                passwordVariable: 'PASSWORD'
              )]) {
                sh 'echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin'
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Docker Login' : ${e.message}"
            error("Échec du login Docker")
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          try {
            container('docker') {

                sh """
                  docker buildx build --push \
                    --build-arg BUILDKIT_INLINE_CACHE=1 \
                    --cache-from=type=registry,ref=${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                    -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                    -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest .
                """

            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Build Docker Image' : ${e.message}"
            error("Échec de la construction de l'image Docker")
          }
        }
      }
    }

    stage('Save Artifacts') {
      steps {
        script {
          try {
            container('docker') {
              sh """
                mkdir -p ${ARTIFACTS_PVC_PATH}/chatsoa-${BUILD_NUMBER}
                cp -r ${WORK_DIR}/build/libs/*.jar ${ARTIFACTS_PVC_PATH}/chatsoa-${BUILD_NUMBER}/ || true
              """
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Save Artifacts' : ${e.message}"
            error("Échec de la sauvegarde des artefacts")
          }
        }
      }
    }

    stage('Nettoyage') {
      steps {
        script {
          try {
            container('docker') {
              sh """
                docker buildx rm mybuilder || true
                docker image prune -af || true
              """
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Nettoyage' : ${e.message}"
            error("Échec lors du nettoyage")
          }
        }
      }
    }

  }

  post {
    success { echo "Build terminé avec succès pour ChatSOA" }
    failure { echo "Build échoué pour ChatSOA" }
  }
}
