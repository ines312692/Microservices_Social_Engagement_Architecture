pipeline {
  agent {
    kubernetes {
      inheritFrom 'build-chat'
      defaultContainer 'docker'
      namespace 'soa-microservices'
      serviceAccount 'chatsoa-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'k-chatsoa'
    IMAGE_TAG = "${BUILD_NUMBER}-latest"
    DOCKER_BUILDKIT = '1'
    GRADLE_CACHE_PATH = '/mnt/gradle_cache'
    ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    WORK_DIR = "${WORKSPACE}/chatSOA/chatSOA"
    SONARQUBE_SERVER = 'sonarqube-local'
  }

  options {
    skipDefaultCheckout(true)
    timestamps()
    timeout(time: 15, unit: 'MINUTES')
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          try {
            checkout([
              $class: 'GitSCM',
              branches: [[name: '*/feature/restructure-pipeline']],
              userRemoteConfigs: [[url: 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git']],
              extensions: [
                [$class: 'CloneOption', depth: 1, noTags: false, shallow: true]
              ]
            ])
          } catch (Exception e) {
            echo "Erreur dans le stage 'Checkout' : ${e.message}"
            error("Échec du checkout Git")
          }
        }
      }
    }

    stage('UnitTest') {
      when {
        changeset "**/*.java"
      }
      steps {
        script {
          try {
            container('gradle') {
              dir("${WORK_DIR}") {
                sh 'chmod +x ./gradlew'
                sh './gradlew test --parallel --max-workers=4 --project-cache-dir=${GRADLE_CACHE_PATH}'
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'UnitTest' : ${e.message}"
            error("Échec des tests unitaires")
          }
        }
      }
    }

    stage('SonarQube') {
      steps {
        script {
          try {
            container('gradle') {
              dir("${WORK_DIR}") {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                  sh './gradlew sonarqube --project-cache-dir=${GRADLE_CACHE_PATH} -Dsonar.projectKey=chatsoa'
                }
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'SonarQube' : ${e.message}"
            error("Échec de l'analyse SonarQube")
          }
        }
      }
    }


    stage('Build') {
      steps {
        script {
          try {
            container('gradle') {
              dir("${WORK_DIR}") {
                sh '''
                  chmod +x ./gradlew
                  export GRADLE_USER_HOME=${GRADLE_CACHE_PATH}
                  ./gradlew build --parallel --max-workers=4 --project-cache-dir=${GRADLE_CACHE_PATH}
                  ls -l build/libs
                  ls -l /mnt/gradle_cache/wrapper/dists || echo "Dossier vide"
                '''
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Build' : ${e.message}"
            error("Échec de la compilation")
          }
        }
      }
    }

    stage('Push') {
      steps {
        script {
          try {
            container('docker') {
              withCredentials([usernamePassword(
                credentialsId: 'dockerhub-creds',
                usernameVariable: 'USERNAME',
                passwordVariable: 'PASSWORD'
              )]) {
                sh 'echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin'
                dir("${WORK_DIR}") {
                  sh """
                    docker buildx build --push \
                      --build-arg BUILDKIT_INLINE_CACHE=1 \
                      --cache-from=type=registry,ref=${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                      -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                      -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest .
                  """
                }
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Push' : ${e.message}"
            error("Échec de la construction/push de l'image Docker")
          }
        }
      }
    }

    stage('Deploy') {
      steps {
        script {
          try {
            container('kubectl') {
              withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG')]) {
                sh """
                  kubectl --kubeconfig=\${KUBECONFIG} apply -f ${WORK_DIR}/k8s/deployment.yaml
                  kubectl --kubeconfig=\${KUBECONFIG} rollout status deployment/chatsoa -n soa-microservices
                """
              }
            }
          } catch (Exception e) {
            echo "Erreur dans le stage 'Deploy' : ${e.message}"
            error("Échec du déploiement")
          }
        }
      }
    }
  }

  post {
    success {
      echo "Pipeline terminé avec succès pour ChatSOA"
    }
    failure {
      echo "Pipeline échoué pour ChatSOA"
    }
    always {
      script {
        try {
          container('docker') {
            sh '''
              docker buildx rm mybuilder || true
              docker image prune -af || true
            '''
          }
        } catch (Exception e) {
          echo "Erreur lors du nettoyage : ${e.message}"
        }
      }
    }
  }
}