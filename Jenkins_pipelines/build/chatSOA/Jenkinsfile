pipeline {
    agent {
        kubernetes {
            inheritFrom 'build-chat'
            defaultContainer 'gradle'
            namespace 'soa-microservices'
            serviceAccount 'chatsoa-deployer'
        }
    }

    parameters {
        string(
            name: 'TARGET_BRANCH',
            defaultValue: 'ops/jenkins-chat-improvement',
            description: 'Branche à builder'
        )
    }

    environment {
        DOCKERHUB_IMAGE   = 'k-chatsoa'
        IMAGE_TAG         = "${BUILD_NUMBER}-latest"
        DOCKER_BUILDKIT   = '1'
        GRADLE_CACHE_PATH = '/mnt/gradle_cache'
        GRADLE_USER_HOME  = "${GRADLE_CACHE_PATH}"
        REPO_URL          = 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git'
        SONARQUBE_SERVER  = 'sonarqube-local'
        WORK_DIR          = "${WORKSPACE}/chatSOA/chatSOA"
    }

    options {
        skipDefaultCheckout(true)
    }

    stages {

        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "Checkout depuis la branche ${params.TARGET_BRANCH}"
                        retry(2) {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "*/${params.TARGET_BRANCH}"]],
                                userRemoteConfigs: [[url: "${REPO_URL}"]],
                                extensions: [
                                    [$class: 'CloneOption', depth: 1, noTags: true, shallow: true],
                                    [$class: 'LocalBranch', localBranch: "${params.TARGET_BRANCH}"],
                                    [$class: 'CleanBeforeCheckout'],
                                    [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                                        [path: 'chatSOA/']
                                    ]]
                                ]
                            ])
                        }
                    } catch (Exception e) {
                        echo "Erreur Checkout : ${e.toString()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Préparer Cache') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh "chmod +x ./gradlew"
                                sh "[ -d ${GRADLE_CACHE_PATH} ] || mkdir -p ${GRADLE_CACHE_PATH}"
                            } catch (Exception e) {
                                echo "Erreur préparation cache : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Prewarm Gradle Daemon') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            echo "Préchauffage du daemon Gradle..."
                            sh "./gradlew --daemon help || true"
                        }
                    }
                }
            }
        }

        stage('Build Gradle') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh """
                                    ./gradlew assemble \
                                        --parallel \
                                        --max-workers=4 \
                                        --project-cache-dir=${GRADLE_CACHE_PATH} \
                                        --daemon \
                                        --configure-on-demand \
                                        --build-cache \
                                        --no-scan
                                """
                            } catch (Exception e) {
                                echo "Erreur Build Gradle : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                container('gradle') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                sh """
                                    ./gradlew test \
                                        --parallel \
                                        --max-workers=4 \
                                        --project-cache-dir=${GRADLE_CACHE_PATH}
                                """
                            } catch (Exception e) {
                                echo "Erreur Unit Tests : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                container('docker') {
                    dir("${WORK_DIR}") {
                        script {
                            try {
                                docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                                    def imageName = "inestmimi123/k-chatsoa:${IMAGE_TAG}"
                                    def appImage = docker.build(
                                        imageName,
                                        """--build-arg BUILDKIT_INLINE_CACHE=1 \
                                           --cache-from=inestmimi123/k-chatsoa:latest \
                                           --cache-from=inestmimi123/k-chatsoa:cache \
                                           --target=production \
                                           -f Dockerfile ."""
                                    )
                                    parallel(
                                        "Push Tagged": { appImage.push() },
                                        "Push Latest": { appImage.push('latest') }
                                    )
                                }
                            } catch (Exception e) {
                                echo "Erreur Docker Build & Push : ${e.toString()}"
                                currentBuild.result = 'FAILURE'
                                throw e
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build terminé avec succès pour ChatSOA"
        }
        failure {
            echo "Build échoué pour ChatSOA"
        }
    }
}
