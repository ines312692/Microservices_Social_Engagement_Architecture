pipeline {
  agent {
    kubernetes {
      inheritFrom 'build-chat'
      defaultContainer 'docker'
      namespace 'soa-microservices'
      serviceAccount 'chatsoa-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'k-chatsoa'
    IMAGE_TAG = "${BUILD_NUMBER}-latest"
    DOCKER_BUILDKIT = '1'
    GRADLE_CACHE_PATH = '/mnt/gradle_cache'
    ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    WORK_DIR = "${WORKSPACE}/chatSOA/chatSOA"
  }

  options {
    skipDefaultCheckout(true)
    timestamps()
    timeout(time: 15, unit: 'MINUTES')
  }

  stages {
    stage('Checkout Last Commit Only') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/feature/otimising_jenkins_build_performance']],
          userRemoteConfigs: [[url: 'https://github.com/ines312692/Microservices_Social_Engagement_Architecture.git']],
          extensions: [
            [$class: 'CloneOption', depth: 1, noTags: false, shallow: true]
          ]
        ])
      }
    }

    stage('Préparer Gradle Cache') {
      steps {
        container('docker') {
          sh 'mkdir -p ${GRADLE_CACHE_PATH}'
          sh 'mkdir -p ${ARTIFACTS_PVC_PATH}'
        }
      }
    }

    stage('Docker Login') {
      steps {
        container('docker') {
          withCredentials([usernamePassword(
            credentialsId: 'dockerhub-creds',
            usernameVariable: 'USERNAME',
            passwordVariable: 'PASSWORD'
          )]) {
            sh 'echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin'
          }
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('gradle') {
          dir("${WORK_DIR}") {
            sh 'chmod +x ./gradlew'
            sh './gradlew test --project-cache-dir=${GRADLE_CACHE_PATH}'

          }
        }
      }
    }

    stage('Build') {
      steps {
        container('gradle') {
          dir("${WORK_DIR}") {
            sh 'chmod +x ./gradlew'
            sh './gradlew build --project-cache-dir=${GRADLE_CACHE_PATH}'
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('docker') {
          dir("${WORKSPACE}") {
            sh '''
              docker buildx create --use --name mybuilder || true
              docker buildx build \
                --cache-from=type=registry,ref=$DOCKERHUB_USERNAME/$DOCKERHUB_IMAGE:cache \
                --cache-to=type=registry,ref=$DOCKERHUB_USERNAME/$DOCKERHUB_IMAGE:cache,mode=max \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --push \
                -t $DOCKERHUB_USERNAME/$DOCKERHUB_IMAGE:$IMAGE_TAG \
                -t $DOCKERHUB_USERNAME/$DOCKERHUB_IMAGE:latest .
            '''
          }
        }
      }
    }

    stage('Save Artifacts') {
      steps {
        container('docker') {
          sh '''
            mkdir -p $ARTIFACTS_PVC_PATH/chatsoa-$BUILD_NUMBER
            cp -r $WORK_DIR/build/libs/*.jar $ARTIFACTS_PVC_PATH/chatsoa-$BUILD_NUMBER/ || true
          '''
        }
      }
    }

    stage('Nettoyage') {
      steps {
        container('docker') {
          sh '''
            docker buildx rm mybuilder || true
            docker image prune -af || true
          '''
        }
      }
    }
  }

  post {
    success {
      echo "Build terminé avec succès pour ChatSOA"
    }
    failure {
      echo "Build échoué pour ChatSOA"
    }
  }
}
